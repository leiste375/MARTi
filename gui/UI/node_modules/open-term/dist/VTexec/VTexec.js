"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var VT_1 = require("../VT");
var utils_1 = require("./utils");
var searchConfigDefaults = __importStar(require("./searchConfigDefaults"));
/**This function designed to capture virtual terminal startup errors. */
var omitError = function (error) { return null; };
function VTexec(command, VTexecConfig) {
    var VTexecConfigWithDefaults = utils_1.setVTexecConfigDefaults(VTexecConfig);
    function findVt(platform, vtList) {
        var supportedVtMap = VT_1.VT[platform];
        for (var _i = 0, vtList_1 = vtList; _i < vtList_1.length; _i++) {
            var vt = vtList_1[_i];
            var terminalExecutor = supportedVtMap[vt];
            if (terminalExecutor) {
                var termProc = terminalExecutor(command);
                if (termProc.pid)
                    return termProc;
                termProc.on('error', omitError);
            }
        }
        throw new Error("No Virtual Terminal Emulator found for platform: " + platform + ", with provided \"SearchConfig\" in VTexecConfig!");
    }
    if (typeof command !== 'string') {
        throw new Error('Please provide command string to execute in VT!');
    }
    var platform = process.platform;
    if (VTexecConfigWithDefaults[platform] === null)
        throw new utils_1.NotSupported("Platform: " + platform + " is not supported!");
    switch (platform) {
        case 'linux':
        case 'win32':
            var vtList = utils_1.searchConfigToList(VTexecConfigWithDefaults[platform]);
            try {
                return findVt(platform, vtList);
            }
            catch (err) {
                throw new utils_1.NotSupported(err.message);
            }
        default:
            break;
    }
    if (VTexecConfigWithDefaults.default === null)
        throw new utils_1.NotSupported("Platform: " + platform + " is not supported!");
    for (var _i = 0, _a = VTexecConfigWithDefaults.default; _i < _a.length; _i++) {
        var fallbackPlatform = _a[_i];
        if (Object.keys(VT_1.VT).includes(fallbackPlatform)) {
            var vtList = utils_1.searchConfigToList(searchConfigDefaults[fallbackPlatform]);
            try {
                return findVt(fallbackPlatform, vtList);
            }
            catch (err) { }
        }
    }
    throw new utils_1.NotSupported("No fallback Virtual Terminal Emulator found in platforms: " + VTexecConfigWithDefaults.default + "!");
}
exports.default = VTexec;
