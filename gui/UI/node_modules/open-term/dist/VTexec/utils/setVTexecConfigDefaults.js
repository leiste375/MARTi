"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var VT_1 = require("../../VT");
var searchConfigDefaults_1 = require("../searchConfigDefaults");
function setLinuxSearchConfigDefaults(linuxSearchConfig) {
    if (linuxSearchConfig.priorityTerms === undefined)
        linuxSearchConfig.priorityTerms = searchConfigDefaults_1.linux.priorityTerms;
    if (linuxSearchConfig.terms === undefined)
        linuxSearchConfig.terms = searchConfigDefaults_1.linux.terms;
    if (linuxSearchConfig.excludeTerms === undefined)
        linuxSearchConfig.excludeTerms = searchConfigDefaults_1.linux.excludeTerms;
}
function setWin32SearchConfigDefaults(win32SearchConfig) {
    if (win32SearchConfig.priorityTerms === undefined)
        win32SearchConfig.priorityTerms = searchConfigDefaults_1.win32.priorityTerms;
    if (win32SearchConfig.terms === undefined)
        win32SearchConfig.terms = searchConfigDefaults_1.win32.terms;
    if (win32SearchConfig.excludeTerms === undefined)
        win32SearchConfig.excludeTerms = searchConfigDefaults_1.win32.excludeTerms;
}
/**
 * This function Set Default values for all missing properties of VTexecConfig.
 * @returns **VTexecConfig** with filled default values.
 */
function setVTexecConfigDefaults(config) {
    if (config === void 0) { config = {}; }
    var _a = config.linux, linux = _a === void 0 ? searchConfigDefaults_1.linux : _a, _b = config.win32, win32 = _b === void 0 ? searchConfigDefaults_1.win32 : _b, _c = config.default, VTFallbackPlatforms = _c === void 0 ? Object.keys(VT_1.VT) : _c, // undefined - lookall, null - throw NotFound, array - look in array
    restConfig = __rest(config, ["linux", "win32", "default"]);
    if (linux !== null)
        setLinuxSearchConfigDefaults(linux);
    if (win32 !== null)
        setWin32SearchConfigDefaults(win32);
    return __assign({ linux: linux, win32: win32, default: VTFallbackPlatforms }, restConfig);
}
exports.default = setVTexecConfigDefaults;
